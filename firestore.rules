// firestore.rules - Enhanced with Communications Dashboard collections
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user has a specific permission
    function hasPermission(permission) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      
      // Owner has all permissions
      return userDoc.data.role == 'owner' ||
        // Check role permissions
        (exists(/databases/$(database)/documents/roles/$(userDoc.data.role)) && 
         permission in get(/databases/$(database)/documents/roles/$(userDoc.data.role)).data.permissions) ||
        // Check custom permissions (if not in denied list)
        (permission in userDoc.data.customPermissions && 
         !(permission in userDoc.data.deniedPermissions));
    }
    
    // Helper function to check if user can manage another user's role
    function canManageUserWithRole(targetRole) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      
      // Owner can manage everyone
      return userDoc.data.role == 'owner' ||
        // Admin can manage non-admin/owner roles
        (userDoc.data.role == 'admin' && 
         targetRole != 'owner' && 
         targetRole != 'admin');
    }
    
    // Helper function to check if user is a coordinator for a region
    function isRegionCoordinator(region) {
      return exists(/databases/$(database)/documents/comms_coordinators/$(request.auth.uid)) &&
        region in get(/databases/$(database)/documents/comms_coordinators/$(request.auth.uid)).data.regions;
    }
    
    // Helper function to check project visibility
    function canViewProject(project) {
      let userId = request.auth.uid;
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      
      return hasPermission('manage_comms') || // Full access
        hasPermission('view_all_regions') || // Can view all regions
        project.createdBy == userId || // Creator
        userId in project.sharedWith || // Explicitly shared
        (project.visibility == 'public' && hasPermission('view_comms')) || // Public projects
        (isRegionCoordinator(project.region) && hasPermission('view_comms')); // Regional coordinator
    }
    
    // Users collection (existing rules preserved)
    match /users/{userId} {
      // Anyone authenticated can read users if they have view permission
      allow read: if request.auth != null && 
        (request.auth.uid == userId || hasPermission('view_users'));
      
      // Create users with proper permission
      allow create: if request.auth != null && hasPermission('create_users');
      
      // Update users - Allow self-updates and admin updates
      allow update: if request.auth != null && (
        // Users can update their own activity and limited fields (including security settings)
        (request.auth.uid == userId && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['displayName', 'photoURL', 'lastActive', 'preferences', 'securitySettings', 'updatedAt'])) ||
        // Users with edit_users permission can update others
        (hasPermission('edit_users') && 
         canManageUserWithRole(resource.data.role) &&
         (resource.data.role == request.resource.data.role || 
          canManageUserWithRole(request.resource.data.role)))
      );
      
      // Delete users with proper permission
      allow delete: if request.auth != null && 
        hasPermission('delete_users') && 
        request.auth.uid != userId &&
        canManageUserWithRole(resource.data.role);
    }
    
    // Roles collection (existing rules preserved)
    match /roles/{roleId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && hasPermission('manage_roles');
    }
    
    // Permissions collection (existing rules preserved)
    match /permissions/{permissionId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && hasPermission('manage_permissions');
    }
    
    // Audit logs (existing rules preserved)
    match /audit_logs/{logId} {
      allow read: if request.auth != null && (
        (resource.data.userId == request.auth.uid) ||
        hasPermission('view_audit_logs')
      );
      
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['action', 'userId', 'timestamp']) &&
        request.resource.data.action is string &&
        request.resource.data.timestamp is timestamp;
      
      allow update, delete: if false;
    }
    
    // Communications Regions collection (read-only reference data)
    match /comms_regions/{regionId} {
      allow read: if request.auth != null && hasPermission('view_comms');
      allow write: if request.auth != null && hasPermission('manage_comms');
    }
    
    // Communications Coordinators collection
    match /comms_coordinators/{coordinatorId} {
      allow read: if request.auth != null && hasPermission('view_comms');
      allow write: if request.auth != null && hasPermission('manage_comms_coordinators');
    }
    
    // Communications Projects collection
    match /comms_projects/{projectId} {
      allow read: if request.auth != null && 
        hasPermission('view_comms') && 
        canViewProject(resource.data);
      
      allow create: if request.auth != null && 
        hasPermission('create_comms_projects') &&
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.keys().hasAll(['title', 'region', 'status', 'visibility', 'createdBy', 'createdAt']);
      
      allow update: if request.auth != null && (
        hasPermission('manage_comms') ||
        (hasPermission('edit_comms_projects') && canViewProject(resource.data)) ||
        (resource.data.createdBy == request.auth.uid && hasPermission('edit_comms_projects'))
      );
      
      allow delete: if request.auth != null && (
        hasPermission('manage_comms') ||
        (hasPermission('delete_comms_projects') && resource.data.createdBy == request.auth.uid)
      );
    }
    
   // Communications Files collection - SIMPLIFIED VERSION
    match /comms_files/{fileId} {
      // Allow authenticated users with view_comms to read
      allow read: if request.auth != null && 
        hasPermission('view_comms');
      
      // Allow authenticated users to create files
      allow create: if request.auth != null && 
        request.resource.data.createdBy == request.auth.uid;
      
      // Allow users to update their own files
      allow update: if request.auth != null && 
        resource.data.createdBy == request.auth.uid;
      
      // Allow users to delete their own files
      allow delete: if request.auth != null && (
        hasPermission('manage_comms') ||
        resource.data.createdBy == request.auth.uid
      );
    }
    
    // Communications Messages collection (forum posts)
    match /comms_messages/{messageId} {
      // Allow read for analytics purposes if user has view_analytics permission
      // OR manage_comms permission (for counting/analytics)
      // OR if they have view_comms and can view the specific project
      allow read: if request.auth != null && (
        hasPermission('view_analytics') ||
        hasPermission('manage_comms') ||
        (hasPermission('view_comms') &&
         resource.data.projectId != null &&
         exists(/databases/$(database)/documents/comms_projects/$(resource.data.projectId)) &&
         canViewProject(get(/databases/$(database)/documents/comms_projects/$(resource.data.projectId)).data))
      );
      
      allow create: if request.auth != null && 
        hasPermission('view_comms') &&  // Allow anyone with view_comms to post
        exists(/databases/$(database)/documents/comms_projects/$(request.resource.data.projectId)) &&
        canViewProject(get(/databases/$(database)/documents/comms_projects/$(request.resource.data.projectId)).data) &&
        request.resource.data.authorId == request.auth.uid;
      
      // FIXED: Added 'deleted' to allowed fields for soft delete functionality
      allow update: if request.auth != null && 
        resource.data.authorId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['content', 'editedAt', 'deleted']);
      
      allow delete: if request.auth != null && (
        hasPermission('manage_comms') ||
        resource.data.authorId == request.auth.uid
      );
    }
    
    // Communications Templates collection
    match /comms_templates/{templateId} {
      allow read: if request.auth != null && hasPermission('view_comms');
      
      allow create, update: if request.auth != null && 
        hasPermission('manage_comms_templates');
      
      allow delete: if request.auth != null && 
        hasPermission('manage_comms_templates');
    }
    
    // Projects collection (future)
    match /projects/{projectId} {
      allow read: if request.auth != null && hasPermission('view_projects');
      allow create: if request.auth != null && hasPermission('create_projects');
      allow update: if request.auth != null && hasPermission('edit_projects');
      allow delete: if request.auth != null && hasPermission('delete_projects');
    }
    
    // Forums collection (future)
    match /forums/{forumId} {
      allow read: if request.auth != null && hasPermission('view_forums');
      allow write: if request.auth != null && hasPermission('manage_forums');
      
      match /posts/{postId} {
        allow read: if request.auth != null && hasPermission('view_forums');
        allow create: if request.auth != null && hasPermission('create_posts');
        allow update: if request.auth != null && 
          (request.auth.uid == resource.data.authorId || hasPermission('edit_posts'));
        allow delete: if request.auth != null && 
          (request.auth.uid == resource.data.authorId || hasPermission('delete_posts'));
      }
    }
    
    // Calendar events collection (future)
    match /events/{eventId} {
      allow read: if request.auth != null && hasPermission('view_calendar');
      allow create: if request.auth != null && hasPermission('create_events');
      allow update: if request.auth != null && hasPermission('edit_events');
      allow delete: if request.auth != null && hasPermission('delete_events');
    }
    
    // Activity tracking collection
    match /user_activity/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create, update: if request.auth != null && 
        request.auth.uid == userId &&
        request.resource.data.keys().hasOnly(['lastActive', 'lastPage', 'sessionStart']);
      allow delete: if false;
    }
  }
}